#!/usr/bin/env zsh
#
# Defines environment variables.
# This file is sourced by all instances of Zsh (interactive, non-interactive, login and non-login ),
# and thus, it should be kept as small as possible and should only define environment variables.

#echo "Running .zshenv"

# OS and Architecture
export UNAME_SYSTEM=$(/usr/bin/uname -s)
export UNAME_MACHINE=$(/usr/bin/uname -m)


# XDG  Base Directory Specification
# - https://specifications.freedesktop.org/basedir-spec/latest/
# - https://wiki.archlinux.org/title/XDG_Base_Directory
export XDG_CONFIG_HOME="$HOME/.config"
export XDG_CACHE_HOME="$HOME/.cache"
export XDG_DATA_HOME="$HOME/.local/share"
export XDG_STATE_HOME="$HOME/.local/state"
# export $XDG_RUNTIME_DIR="${XDG_RUNTIME_DIR:="/run/user/$UID"}"

# Ensure that a non-login, non-interactive shell has a defined environment.
if [[ "$SHLVL" -eq 1 && ! -o LOGIN && -s "${ZDOTDIR:-$HOME}/.zprofile" ]]; then
  source "${ZDOTDIR:-$HOME}/.zprofile"
fi

# Editors
#
export EDITOR='nvim'
export VISUAL='nvim'
export PAGER='less'


# file names to ignore
zstyle ':completion:*:*files' ignored-patterns '.DS_Store'
# Typing EOF (CTRL+D) will not exit interactive sessions
setopt ignoreeof

# Applications

# homebrew
if [[ "${UNAME_SYSTEM}" == "Darwin" ]]; then
  if [[ "${UNAME_MACHINE}" == "arm64" ]]; then
    export HOMEBREW_PREFIX="/opt/homebrew"
  else
    export HOMEBREW_PREFIX="/usr/local"
  fi
  [[ -s "${HOMEBREW_PREFIX}/bin/brew" ]] && {
    export HOMEBREW_CELLAR="${HOMEBREW_PREFIX}/Cellar"
      export HOMEBREW_REPOSITORY="${HOMEBREW_PREFIX}/Homebrew"
      export PATH="${HOMEBREW_PREFIX}/bin:${HOMEBREW_PREFIX}/sbin${PATH+:$PATH}"
      export MANPATH="${HOMEBREW_PREFIX}/share/man${MANPATH+:$MANPATH}:"
      export INFOPATH="${HOMEBREW_PREFIX}/share/info:${INFOPATH:-}"
      export FPATH="${HOMEBREW_PREFIX}/share/zsh/site-functions:${FPATH}"

    }
fi
# zim
export ZIM_HOME=${HOME}/.local/zim
# teaaldeer and XDG https://github.com/dbrgn/tealdeer/issues/311
export TEALDEER_CONFIG_DIR="${XDG_CONFIG_HOME}/tealdeer"
# Docker
export DOCKER_CONFIG="$XDG_CONFIG_HOME"/docker
# Ruby gems
export GEM_HOME="${XDG_DATA_HOME}"/gem
# use gojq in jq-repl (https://github.com/reegnz/jq-zsh-plugin)
JQ_REPL_JQ=gojq
