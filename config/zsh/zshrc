#!/usr/bin/env zsh

####  ========================================================================================================= ####
# This file is sourced by interactive shells. It should define aliases,
# functions, shell options, and key bindings.

# http://zsh.sourceforge.net/Intro/intro_toc.html#SEC16

# .zshenv is always sourced, it often contains exported variables that
# should be available to other programs. For example, $PATH, $EDITOR, and $PAGER
# are often set in .zshenv. Also, you can set $ZDOTDIR in .zshenv to specify an
# alternative location for the rest of your zsh configuration.
#
# .zshrc is for interactive shell configuration. You set options for the interactive
# shell there with the setopt and unsetopt commands. You can also load shell modules,
# set your history options, change your prompt, set up zle and completion, et cetera.
# You also set any variables that are only used in the interactive shell (e.g. $LS_COLORS).
#
# .zlogin is sourced on the start of a login shell. This file is often used to start X
# using startx. Some systems start X on boot, so this file is not always very useful.
#
# .zprofile is basically the same as .zlogin except that it's sourced directly before
# .zshrc is sourced instead of directly after it. According to the zsh documentation,
# ".zprofile is meant as an alternative to `.zlogin' for ksh fans; the two are not
# intended to be used together, although this could certainly be done if desired."
#
# .zlogout is sometimes used to clear and reset the terminal.
#
# http://zsh.sourceforge.net/Guide/zshguide.html

####  ========================================================================================================= ####

# echo "Running .zshrc"

# load profiling
PROFILE_STARTUP=false
if [[ "$PROFILE_STARTUP" == true ]]; then
  zmodload zsh/zprof
fi

# Nix
fpath=($HOME/.nix-profile/share/zsh/site-functions $fpath)
if [ -e '/nix/var/nix/profiles/default/etc/profile.d/nix-daemon.sh' ]; then
  . '/nix/var/nix/profiles/default/etc/profile.d/nix-daemon.sh'
fi
# End Nix
# install and load plugins with sheldon
command -v sheldon >/dev/null 2>&1  && {
  eval "$(sheldon source)"
}

# load shared shell configuration
[ -f ~/.shrc ] && source ~/.shrc

# init zimfw
if [[ -s "${ZIM_HOME}/init.zsh" ]]; then
  # Update static initialization script if it's outdated, before sourcing it
  # source ${ZIM_HOME}/zimfw.zsh init -q
  source ${ZIM_HOME}/init.zsh
fi


# Personal settings below  -------------------------------------------------------

## show current dir in terminal title
_set_terminal_title() {
  echo -ne "\033]0;$(pwd | sed -e "s;^$HOME;~;")\a"
}
precmd_functions+=(_set_terminal_title)
# add zfunc to fpath
[ -d "$HOME/.zfunc" ] || mkdir "$HOME/.zfunc"
fpath=( "$HOME/.zfunc" $fpath )

# # Load and initialize the completion system ignoring insecure directories with a
# cache time of 20 hours, so it should almost always regenerate the first time a
# shell is opened each day.
autoload -Uz compinit
_comp_path="${XDG_CACHE_HOME:-$HOME/.cache}/zcompdump"
# #q expands globs in conditional expressions
if [[ $_comp_path(#qNmh-20) ]]; then
  # -C (skip function check) implies -i (skip security check).
  compinit -C -d "$_comp_path"
else
  mkdir -p "$_comp_path:h"
  compinit -i -d "$_comp_path"
  # Keep $_comp_path younger than cache time even if it isn't regenerated.
  touch "$_comp_path"
fi
unset _comp_path

_comp_options+=(globdots) # include hidden files
zstyle ':completion:*' menu select # autocompletion with an arrow-key driven interface
zmodload zsh/complist
#Change directories with variable names
setopt cdablevars
#globdots lets files beginning with a . be matched without explicitly specifying the dot.
setopt globdots
# extendedglob gives ability to do l -l **/*(^U)
setopt extendedglob
#turn off autocorrect
unsetopt correct
#allows ‘>’ redirection to truncate existing files.
setopt clobber
#Report the status of background jobs immediately, rather than waiting until just before printing a prompt
setopt notify
#no beep,
unsetopt beep
# History command configuration
HISTFILE=~/.zhistory_$HOST
setopt extended_history       # record timestamp of command in HISTFILE
setopt hist_expire_dups_first # delete duplicates first when HISTFILE size exceeds HISTSIZE
setopt hist_ignore_dups       # ignore duplicated commands history list
setopt hist_ignore_space      # ignore commands that start with space
setopt hist_verify            # show command with history expansion to user before running it
setopt inc_append_history     # add commands to HISTFILE in order of execution
setopt share_history          # share command history data
#If a pattern for filename generation has no matches, print an error,
#instead of leaving it unchanged in the argument list. This also
#applies to file expansion of an initial ~ or =.
unsetopt nomatch
# setup help function for built-in commands"
unalias run-help 2>/dev/null
autoload run-help
# Enable edit command line
autoload -U edit-command-line && zle -N edit-command-line
bindkey '^xe' edit-command-line      # Ctrl+xe to open command line in editor
bindkey -a '^xe' edit-command-line   # Ctrl+xe to open command line in editor
bindkey '^x^e' edit-command-line     # Ctrl+x, Ctrl+e to open command line in editor
bindkey -a '^x^e' edit-command-line  # Ctrl+x, Ctrl+e to open command line in editor

# # vi mode
# loade via jeffreytse/zsh-vi-mode with sheldon

#Use up key to search backward in the history for a line beginning with the current line up to the cursor.
bindkey '\e[A' history-beginning-search-backward
#Use down key to search forward in the history for a line beginning with the current line up to the cursor.
bindkey '\e[B' history-beginning-search-forward

# expand aliases with ^space
# idea from https://blog.patshead.com/2012/11/automatically-expaning-zsh-global-aliases---simplified.html
__expand_alias_widget() {
    zle _expand_alias
    zle expand-word
}
zle -N expand-alias-widget __expand_alias_widget
bindkey "^ " expand-alias-widget
# select global_alias, ^g^g
__select_global_alias_widget() {
  local alias=$(alias | awk -F "=" '{print $1}' | tr -d "\'" | grep -E '\b[[:upper:]]+\b' \
                | fzf  --layout=reverse)
  LBUFFER+="${alias} "
}
zle -N select-global-alias __select_global_alias_widget
bindkey '^G' select-global-alias
# better ^z, press twice = suspend + bg (https://superuser.com/a/378045)
__better_ctrl_z_widget () {
  if [[ $#BUFFER -eq 0 ]]; then
    bg
    zle redisplay
  else
    zle push-input
  fi
}
zle -N better-ctrl-z __better_ctrl_z_widget
bindkey '^Z' better-ctrl-z

# Using Base16 for Shells https://github.com/chriskempson/base16-shell
local base16_theme="base16_gruvbox-dark-medium"
type -f $base16_theme >/dev/null 2>&1 && eval $base16_theme

# fast cd jumping
command -v zoxide >/dev/null 2>&1 && {
  export _ZO_DATA_DIR="$HOME/.local/share"
  eval "$(zoxide init zsh)"
}

# Use openssl from homebrew instead of provided
if [[ -v $HOMEBREW_PREFIX && "${UNAME_SYSTEM}" == "Darwin" ]]; then
  local openssl_path="$(brew --prefix openssl)/bin"
  [ -d $openssl_path ] && export PATH=$openssl_path:$PATH
fi

# Use lf to cd and bind it to ctrl-o
# command -v lf >/dev/null 2>&1  && {
#   lfcd () {
#     cd "$(command lf -print-last-dir "$@")"
#   }
#   bindkey -s '^o' 'lfcd\n'
# }

# Use yazi to cd and bind it to ctrl-o
command -v yazi >/dev/null 2>&1  && {
  function __yazicd() {
    tmp="$(mktemp -t "yazi-cwd.XXXXX")"
    yazi --cwd-file="$tmp"
    if cwd="$(cat -- "$tmp")" && [ -n "$cwd" ] && [ "$cwd" != "$PWD" ]; then
      cd -- "$cwd"
    fi
    rm -f -- "$tmp"
  }
  bindkey -s '^o' '__yazicd\n'
}

# load direnv
command -v direnv >/dev/null 2>&1  && {
  eval "$(direnv hook zsh)"
}

[[ ! $OSX ]] && {
  # source kubectl tab completion
  command -v kubectl >/dev/null 2>&1 && source <(kubectl completion zsh)
  # source k3d tab completion
  command -v k3d >/dev/null 2>&1 && source <(k3d completion zsh)
  # source openshift tab completion
  command -v oc >/dev/null 2>&1 && source <(oc completion zsh)
  # source kustomize tab completion
  command -v kustomize >/dev/null 2>&1 && source <(kustomize completion zsh)
  # source argocd tab completion
  command -v argocd >/dev/null 2>&1 && source <(argocd completion zsh)
}

# fzf for fuzzy file mathing. (https://github.com/junegunn/fzf)
command -v fzf >/dev/null 2>&1  && {
  for file in "$XDG_CONFIG_HOME"/fzf/*.zsh; do
      source "$file"
  done
  # Setting ag as the default source for fzf
  command -v ag >/dev/null 2>&1 && export FZF_DEFAULT_COMMAND='ag -g ""'
  # if [[ $OSX ]]; then
  #   bindkey "ç" fzf-cd-widget  # emulate Alt+c
  # fi

}

# Android Studio doesn't honour XDG though it support symlinks
# create directory if not exists and thensymlink
[[ ! -d "$HOME"/.android ]] && mkdir -p "$HOME/.android"
[[ -d "$HOME"/.android && ! -L "$HOME"/.android ]] && mv "$HOME"/.android "$XDG_DATA_HOME"/android && ln -s "$XDG_DATA_HOME"/android "$HOME"/.android
export ANDROID_HOME="$XDG_DATA_HOME"/android
case "$(uname)" in
  Linux*)  export export ANDROID_SDK="$HOME"/Android/Sdk;;
  Darwin*) export export ANDROID_SDK="$HOME"/Library/Android/sdk;;
esac
[ -d "$ANDROID_SDK" ] && {
  export PATH="${PATH}:$ANDROID_SDK/cmdline-tools/latest/bin:$ANDROID_SDK/platform-tools:$ANDROID_SDK/emulator"
}
# Docker
export DOCKER_CONFIG="$XDG_CONFIG_HOME"/docker
# Ruby gems
export GEM_HOME="${XDG_DATA_HOME}"/gem

# Golang
[ -f "$XDG_CONFIG_HOME"/go/golangrc ] && source "$XDG_CONFIG_HOME"/go/golangrc
# Installing go with homebrew instead of gvm
# use gvm - Go Version Manager
#[[ -s "$HOME/.gvm/scripts/gvm" ]]  && source "$HOME/.gvm/scripts/gvm"

# Rust
[[ -d "$HOME/.cargo/bin" ]] && {
  source "$HOME/.cargo/env"
  rustup completions zsh > $HOME/.zfunc/_rustup
}

# bun
[[ -s "$HOME/.bun" ]] && {
  [ -s "$HOME/.bun/_bun" ] && source "$HOME/.bun/_bun"
  export BUN_INSTALL="$HOME/.bun"
  export PATH="$BUN_INSTALL/bin:$PATH"
}
# rvm
[[ -s "$HOME/.rvm/scripts/rvm" ]] && {
  source "$HOME/.rvm/scripts/rvm" # Load RVM into a shell session *as a function*
  export PATH=$PATH:$HOME/.rvm/bin # Add RVM to PATH for scripting
}

# mysql client
if [ -d "/usr/local/opt/mysql-client/bin" ]; then
    export PATH=/usr/local/opt/mysql-client/bin:$PATH
fi

# sdkman
export SDKMAN_DIR="$HOME/.sdkman"
[[ -s "$SDKMAN_DIR/bin/sdkman-init.sh" ]] && {
  # disable GVM alias
  sed -i.bak 's/^\(sdkman_disable_gvm_alias=\).*/\1true/' "$SDKMAN_DIR/etc/config"
  # source sdkman
  source "$SDKMAN_DIR/bin/sdkman-init.sh"
}

# kubectl krew
command -v kubectl >/dev/null 2>&1 && export PATH="${PATH}:${HOME}/.krew/bin"
# dart
export PATH="$PATH":"$HOME/.pub-cache/bin"

# python
command -v python3 >/dev/null 2>&1 && {
  export PATH="$(python3 -m site --user-base)"/bin:$PATH
  export PY_USER_SITE_DIR="$(python3 -m site --user-site)"
}
# pyenv
command -v pyenv >/dev/null 2>&1 && {
  #eval (pyenv init -)
}

# ruby on macos
[[ -s "${HOMEBREW_PREFIX}/ruby/bin" ]] && {
  export PATH="${HOMEBREW_PREFIX}/ruby/bin:$PATH"
}
export PATH="$PATH:$HOME/.rvm/bin" # Add RVM to PATH for scripting

# load nvm
# export NVM_DIR="$HOME/.nvm"
# [ -s "/usr/local/opt/nvm/nvm.sh" ] && . "/usr/local/opt/nvm/nvm.sh"  # This loads nvm
# [ -s "/usr/local/opt/nvm/etc/bash_completion.d/nvm" ] && . "/usr/local/opt/nvm/etc/bash_completion.d/nvm"  # This loads nvm bash_completion

# rancher desktop
[[ -d "$HOME/.rd/bin" ]] && {
  export PATH=$PATH:$HOME/.rd/bin  # put it last in the path
  source <(rdctl completion zsh)
}


# Functions  -------------------------------------------------------
source_sh () {
  emulate -LR sh
  . "$@"
}
[ -f ~/.functions ] && source_sh ~/.functions
[ -f ~/.zsh_functions ] && source ~/.zsh_functions

# Aliases            -------------------------------------------------------
[ -f ~/.aliases ] && source ~/.aliases
[ -f ~/.zsh_aliases ] && source ~/.zsh_aliases

# Add personal bin directory to the path
export PATH=$HOME/bin:$HOME/.local/bin:$PATH

# use autoenv
[[ -f "$HOME/.local/zsh-autoenv/autoenv.zsh" ]] && source "$HOME/zsh-autoenv/autoenv.zsh"

##############################################################################
# Local Config
##############################################################################

# use .zshrc.local for settings specific to local system
[[ -f ~/.zshrc.local ]] && source ~/.zshrc.local


# print system info with fastfetch
# command -v fastfetch >/dev/null 2>&1  && clear; neofetch


# render profiling
if [[ "$PROFILE_STARTUP" == true ]]; then
  zprof > $HOME/zprofile.log
fi

