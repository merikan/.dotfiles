#
# Notes to myself:
# * You can shorten commands as long as there is only one command that starts with
#   the letters you write. So 'bind-key' can be shortened as 'bind' and
#   'set-window-option' can be 'setw'.
# * see the man page if set or setw
# * -n tells tmux that the keybinding doesnâ€™t require pressing the prefix.
# * -r is to enable repeat of command without need for pressing prefix again
# * Control sequences are not case sensitive but Meta sequences are.
#   e.g. C-S-r or C-R doesn't work but this do M-R
# https://github.com/tmux/tmux/wiki/Modifier-Keys

# https://wiki.archlinux.org/title/tmux

# general settings  {{{
set -g default-terminal "screen-256color"
# Set tmux version information as variable
set -g @tmux_version  "$(tmux -V | cut -d' ' -f2 | tr -d a-z)"
# run-shell "tmux set-environment -g TMUX_VERSION $(tmux -V | cut -d' ' -f2 | tr -d a-z)"
# use a non-login shell
set -g default-command "${SHELL}"
# set scrollback history to 20000 (20k)
set -g history-limit 20000
set -g buffer-limit 20
# set delay time between prefix and command to minimum (default:500ms)
set -s escape-time 0
# change the time a message is displayed in the statusbar (default: 750ms)
set-option -g display-time 1500
# don't close window when the program running in it exits
set -g remain-on-exit off
# repeat-time; time to send multiple commands without sending the prefix-key
set -g repeat-time 300
# activity bell and whistles turned off
set -g visual-activity off
setw -g monitor-activity off
# disable automatic renaming windows
setw -g automatic-rename off
# disable changing the window title
set -g allow-rename off
# make sure it will fit in window
setw -g aggressive-resize on
# turn on window title
set -g set-titles on
# set title layout
set -g set-titles-string "[#S]  #I:#W"
# set the base index for windows to 1 instead of 0
set -g base-index 1
# set the base index for panes to 1 instead of 0
setw -g pane-base-index 1
# renumber windows when one is closed or moved
set -g renumber-windows on
# enable mouse support
set -g mouse on
# }}}

# ==========================
# key-bindings {{{
# see current bindings: tmux list-keys

# unbind default prefix
unbind C-b
# set ctrl-a as prefix
set -g prefix C-a
# ensure that we can send Prefix to other apps; e.g. "start-of-line"
bind C-a send-prefix
# remap clear screen, since we using C-l for switching panes
bind C-l send-keys 'C-l'
# toggle mouse
bind m set -g mouse \; display "Mouse: #{?mouse,ON,OFF}"
# toggle status bar on/off
bind C-t set status \; display "Status: #{?status,ON,OFF}"
# prefer vi style key table
setw -g mode-keys vi
# reload tmux configuration
bind r source-file ~/.tmux.conf \; display "tmux.conf reloaded."
# rebind prefix-c, retain cwd and ask for a name
bind c command-prompt -p "Name of new window: " 'new-window -c "#{pane_current_path}" -n '%%' '
# rename window
bind n command-prompt -I "#{window_name}" "rename-window '%%'"
# rename session
bind N command-prompt -I "#{session_name}" "rename-session '%%'"
# split panes (h-split in  tmux is vertical and vice versa)
unbind '"'
unbind %
bind s    split-window -h -c '#{pane_current_path}'
bind |    split-window -h -c '#{pane_current_path}'
bind \\   split-window -h -c '#{pane_current_path}'
bind -    split-window -v -c '#{pane_current_path}'
bind _    split-window -v -c '#{pane_current_path}'
# Smart pane switching with awareness of Vim splits.
# makes ctrl-j and ctrl-k navigate fzf search results when fzf active in pane
# See: https://github.com/christoomey/vim-tmux-navigator
is_vim="ps -o state= -o comm= -t '#{pane_tty}' \
          | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$'"
is_fzf="ps -o state= -o comm= -t '#{pane_tty}' \
          | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?fzf$'"
bind-key -n 'C-h' run "($is_vim && tmux send-keys C-h) || tmux select-pane -L"
bind-key -n 'C-j' run "($is_vim && tmux send-keys C-j)  || ($is_fzf && tmux send-keys C-j) || tmux select-pane -D"
bind-key -n 'C-k' run "($is_vim && tmux send-keys C-k) || ($is_fzf && tmux send-keys C-k)  || tmux select-pane -U"
bind-key -n 'C-l' run  "($is_vim && tmux send-keys C-l) || tmux select-pane -R"
# resize panes
bind -n M-h if-shell "$is_vim" "send-keys M-h" "resize-pane -L 10"
bind -n M-l if-shell "$is_vim" "send-keys M-l" "resize-pane -R 10"
bind -n M-k if-shell "$is_vim" "send-keys M-k" "resize-pane -U 5"
bind -n M-j if-shell "$is_vim" "send-keys M-j" "resize-pane -D 5"

# select pane with Alt-arrow keys without prefix
bind -n M-Left select-pane -L
bind -n M-Right select-pane -R
bind -n M-Up select-pane -U
bind -n M-Down select-pane -D
# resize pane with Alt-Shift-Arrow keys
bind -n M-S-Left resize-pane -L
bind -n M-S-Right resize-pane -R
bind -n M-S-Up resize-pane -U
bind -n M-S-Down resize-pane -D
# select window
bind -r H  previous-window
bind -r L  next-window
bind -n S-Left  previous-window
bind -n S-Right next-window
# select window from tree
bind w run 'tmux choose-tree -Nwf"##{==:##{session_name},#{session_name}}"'
# swap current window left and right
bind -r '<' swap-window -d -t '{previous}' # Move window left.
bind -r '>' swap-window -d -t '{next}' # Move window right.
bind -n C-S-Left  swap-window -d -t '{previous}' # Move window left.
bind -n C-S-Right swap-window -d -t '{next}' # Move window right.
# kill pane/window/session shortcuts
bind x confirm-before -p "kill pane? (y/n)" "kill-pane"
bind X confirm-before -p "kill window? (y/n)" "kill-window"
bind C-x confirm-before -p "kill all other windows? (y/n)" "kill-window -a"
bind Q confirm-before -p "kill-session #S? (y/n)" kill-session
# window monitoring for activity and silence
bind m setw monitor-activity \; display-message 'Monitor window activity [#{?monitor-activity,ON,OFF}]'
bind M if -F '#{monitor-silence}' \
    'setw monitor-silence 0 ; display-message "Monitor window silence [OFF]"' \
    'command-prompt -p "Monitor silence: interval (s)" "setw monitor-silence %%"'

# ================================================
# Copy mode, scroll and clipboard {{{
# https://man.openbsd.org/tmux#WINDOWS_AND_PANES

unbind p
bind p paste-buffer
bind C-p choose-buffer
if-shell "[ $(uname) = 'Darwin' ]" \
    "set -g @copy_command 'reattach-to-user-namespace pbcopy'" \
    "set -g @copy_command 'xclip -in -selection clipboard'"
# enter copy mode with Prefix-Esc
unbind [
bind Escape copy-mode
# exit copy mode
bind -T copy-mode-vi 'q' send -X cancel
# start selction in character-wise mode
bind -T copy-mode-vi 'v' send -X begin-selection
# start selection in line-wise mode
bind -T copy-mode-vi 'V' send -X select-line
# start selection in block-wise mode
bind -T copy-mode-vi 'C-v' send -X begin-selection \; \
                           send -X rectangle-toggle
# clear selection
bind -T copy-mode-vi 'Escape' send -X clear-selection
# copy selected text, but don't leave copy-mode
bind -T copy-mode-vi 'y'   send-keys -X copy-pipe "@copy_command"
# dont leave copy mode when mouse is released
unbind -T copy-mode-vi MouseDragEnd1Pane
# let single click do selection clearing
bind-key -T copy-mode-vi MouseDown1Pane select-pane\; send-keys -X clear-selection
# leave copy-mode when scrolling to bottom if we entered copy-mode with MouseDragEnd1Pane
bind -n MouseDrag1Pane if -Ft= '#{mouse_any_flag}' 'if -Ft= \"#{pane_in_mode}\" \"copy-mode -eM\" \"send-keys -M\"' 'copy-mode -eM'
# When scrolling with mouse wheel, reduce number of scrolled rows per tick to "2" (default is 5)
bind -T copy-mode-vi WheelUpPane       select-pane \; send-keys -X -N 2 scroll-up
bind -T copy-mode-vi WheelDownPane     select-pane \; send-keys -X -N 2 scroll-down
# Send the same command to all panes/windows/sessions
bind E command-prompt -p "Command:" \
        "run \"tmux list-panes -a -F '##{session_name}:##{window_index}.##{pane_index}' \
        | xargs  -I PANE tmux send-keys -t PANE '%1' Enter\""


# ============================
# plugins to be loaded
set -g @plugin 'tmux-plugins/tpm'                   # Tmux Plugin Manager
set -g @plugin 'tmux-plugins/tmux-prefix-highlight' # highlights when you press tmux prefix key.
set -g @plugin 'tmux-plugins/tmux-online-status'    # displays online status
set -g @plugin 'tmux-plugins/tmux-copycat'          # enhances tmux search
set -g @plugin 'fcsonline/tmux-thumbs'
set -g @plugin 'tmux-plugins/tmux-open'             # for quick opening of a highlighted file or url
set -g @plugin 'tmux-plugins/tmux-continuum'        # continuous saving of tmux environment.
set -g @plugin 'tmux-plugins/tmux-resurrect'        # persists tmux environment across system restarts
set -g @plugin 'sainnhe/tmux-fzf'                   # manage your tmux work environment
set -g @plugin 'egel/tmux-gruvbox'                  # the gruvbox theme
# set -g @plugin 'jimeh/tmux-themepack'               # a pack of themes
# set -g @themepack 'powerline/block/gray'            # powerline theme
# set -g @plugin "arcticicestudio/nord-tmux"          # Nord theme

# plugin settings
set -g @resurrect-save 'C-s'
set -g @resurrect-restore 'C-r'
set -g @resurrect-processes 'false' # don't save programs
if-shell "[ $(uname) = 'Darwin' ]" \
    "set -g @thumbs-command 'echo -n {} | pbcopy'"

# install tpm and plugins automatically when tmux is started
if "test ! -d ~/.tmux/plugins/tpm" \
   "run 'git clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm && ~/.tmux/plugins/tpm/bin/install_plugins'"
# Initialize TMUX plugin manager and load plugins
run '~/.tmux/plugins/tpm/tpm'
# prefix + I (install)
# prefix + U (update)
# prefix + alt + u (uninstall)
# prefix + r (refresh)

# override plugin settings
#gruvbox https://github.com/morhetz/gruvbox-contrib/blob/master/color.table
set -g pane-active-border-style fg=colour223
set -g mode-style bg=colour214,fg=colour237
set -g copy-mode-match-style bg=colour136,fg=colour237
set -g copy-mode-current-match-style bg=colour214,fg=colour235

# }}}
