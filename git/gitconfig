# Credits: see below
#
[include]
  # Load private config, not to be pushed to repo
  path = ~/.gitconfig.local

[user]
	name = Peter Merikan
	email = peter@merikan.com
	signingkey = A93D728B0D0028A71C47EB106F86D20024CE1D22

[core]
	excludesfile = ~/.gitignore_global
  # start nvim in insert mode and on line 2
	editor = nvim +star +2
	#precomposeunicode = true

[color]
  diff = auto
  status = auto
  branch = auto
  interactive = auto
  ui = auto
[color "branch"]
  current = yellow reverse
  local = yellow
  remote = green
[color "diff"]
  meta = blue bold
  frag = yellow
  old = red
  new = green
[color "status"]
  added = green
  changed = yellow
  untracked = red

[push]
	default = simple

[commit]
  template = ~/.git_commit_msg
	gpgsign = true

[tag]
	forceSignAnnotated = true

[status]
  # make sure status is submodule aware
	submoduleSummary = true

[diff]
  # console tool
  tool = icdiff
  # gui tool
  guitool = vscode
  # include submodules when diff
	submodule = log
[difftool]
    prompt = false
[merge]
    tool = vscode
    conflictstyle = diff3
[mergetool]
    prompt = false
[pager]
  difftool = true
# icdiff
[difftool "icdiff"]
  cmd = icdiff --line-numbers \"$LOCAL\" \"$REMOTE\"
  #sourcetree
[difftool "stree"]
	cmd = opendiff \"$LOCAL\" \"$REMOTE\"
	path = 
[mergetool "stree"]
	cmd = /Applications/Sourcetree.app/Contents/Resources/opendiff-w.sh \"$LOCAL\" \"$REMOTE\" -ancestor \"$BASE\" -merge \"$MERGED\"
	trustExitCode = true
# vscode
[difftool "vscode"]
  cmd = code --wait --diff \"$LOCAL\" \"$REMOTE\"
[mergetool "vscode"]
  cmd = code --wait $MERGED
# kdiff3
[difftool "kdiff3"]
    cmd = /Applications/kdiff3.app/Contents/MacOS/kdiff3
    trustExitCode = false
[mergetool "kdiff3"]
    cmd = /Applications/kdiff3.app/Contents/MacOS/kdiff3
    trustExitCode = false      

[alias]
  # Update branch (with rebase)
  up = !git pull --rebase --prune $@
  # update submodules
  ups = !git submodule update --init --recursive
  # update submodules from remote
  upsr = !git submodule update --init --recursive --remote
  # Update branch with rebase and update submodules
  upa = !git up && git ups
  # Update recursively (deep)
  upd = "!f() { \
                if [ git rev-parse --git-dir > /dev/null 2>&1 ]; then\
                  git upa;\
                else\
                   echo "$(pwd) is not a git repository";\
                   read -p \"Do you want to do a deep update? (Y/n) \" choice;\
                   choice=${choice:-Y};\
                   if [[ \"$choice\" =~ ^([Yy])$ ]]; then \
                     find . -name '.git' -exec sh -c '([ -e \"$(git rev-parse --show-superproject-working-tree 2>/dev/null)\" ] || echo \">>> Updating `dirname '{}'`\" && cd `dirname '{}'` && git upa)' ';';\
                   fi;\
                fi;\
              }; f"
  # create and checkout a new branch and keep all your changes.
  cob = checkout -b
  # stage the changes for a given file.
  stage = !git add -u
  # unstage is the opposite of git add. It lets you remove items from the staging area.
  unstage = reset HEAD
  # view the current changes in the staging area.
  staged = diff --staged
  # view the current changes not yet in the staging area.
  unstaged = diff
  # incoming changes
  incoming = !git fetch && git log --pretty=oneline --abbrev-commit --graph ..@{u}
  in = !git incoming
  # outgoing changes
  outgoing = log --pretty=oneline --abbrev-commit --graph @{u}..
  out = !git outgoing
  # work in progress, a quick save before swithing branch
  wip = !git add -A :/ && git commit -m 'WIP - Undo this temporary commit.'
  # Send all changes to trash. Commit before trashing so we can find it via 'git reflog' and 'git cherry-pick'
  trash = !git add -A && git commit -qm \"Trashed @ $(date +%Y-%m-%dT%H:%M:%S%z)\" \
           && git reset HEAD~1 --hard \
           && echo "All changes moved to trash. Use 'git reflog' and 'git cherry-pick' to recover." 
  # undo last commit and unstage them
  uncommit = reset HEAD~1
  
  # diff just the differences between lines.
  diffw = diff --word-diff
  # use icdiff if installed
  diffy = !eval $(command -v icdiff >/dev/null 2>&1 && echo icdiff || echo diff) 
  # list all authors
  authors = "!git log --all --format='%aN <%cE>' | sort -u"
  # list al ignored files
  ignored = ls-files -o -i --exclude-standard
  # list frequently used git commands
  frequently = !'history | cut -c 8- | grep git | sort | uniq -c  | sort -n -r | head -n 5'
  # find deleted file(s), parameter [file name] 
  deleted = !git log --diff-filter=D --summary | grep
  # view content of last commit
  log-last-commit = log --name-status HEAD^..HEAD     
  # merge branch with squash
  merge-squash  =  merge --squash
  # Inspect history in various ways
  news = log -p HEAD@{1}..HEAD@{0}
  sl = shortlog
  # show commit log decorated (append -p to show diff)
  l = log --pretty=format:'%C(yellow)%h%Creset %ai %G?%C(green)%d%Creset %s %C(bold blue)<%an>%Creset' --abbrev-commit 
  ll = !git l
  lo = !git l
  # show detailed commit log 
  ld = log --graph --decorate --stat --date=iso --abbrev-commit
  ldd = log --pretty=format:"%C(yellow)%h%C(green)%d\\ %Creset%s%Cblue\\ [%cn]" --decorate --numstat
  # Show commit log using graph notation (append -p to show diff)
  lg = log --graph --abbrev-commit --date=relative --all --pretty=format:%'C(yellow)%h%Creset -%C(green)%d%Creset %s %C(blue)(%ar) %C(bold blue)<%an>%Creset'
  # log all branches (verbose)
  lb = log --graph --all --decorate --stat --date=iso --abbrev-commit
  # create a backup of the branch BAK_mybranch
  backup = !git branch $(git branch | grep '*' | sed -e 's/* /BAK_/')
  # list and sort branches by date
  brs = "!git for-each-ref --sort='-authordate' --format='%(authordate)%09%(objectname:short)%09%(refname)' refs/heads | sed -e 's-refs/heads/--'"
  brs2 = "! f() { for k in $(git branch $@ | sed 's/^..//; s/ .*//'); do  echo "$(git log -1 --pretty='%Cgreen%ci %Cblue(%cr)%Creset ' $k) $k" ;  done | sort -r; }; f"
  # List all git aliases
  aliases = "!git config -l | grep alias | cut -c 7- | sort "
  # Change last commit comment
  amend = commit --amend -m
  # list assumed files
  assumed = "!git ls-files -v | grep ^h | cut -c 3-"
  # assume a file
  assume = update-index --assume-unchanged
  # assume all
  assumeall = "!git st -s | awk {'print $2'} | xargs git assume"
  # unassume file
  unassume = update-index --no-assume-unchanged
  # unassume all files
  unassumeall = "!git assumed | xargs git update-index --no-assume-unchanged"
  # Shortened commands 
  br = branch -v
  ci = commit
  co = checkout
  cp = cherry-pick
  di = diff
  fi = flow init
  ff = flow feature
  fr = flow release
  fh = flow hotfix
  ms = !git merge-squash
  st = status
  # and even shorter
  b = branch -v
  r = remote -v
  t = tag -l
	accept-theirs = "!f() { git checkout --theirs -- \"${@:-.}\"; git add -u \"${@:-.}\"; }; f"
	accept-ours = "!f() { git checkout --ours -- \"${@:-.}\"; git add -u \"${@:-.}\"; }; f"
  
  # open repo in browser, usage: git open [upstream] 
  open  = "!f() { URL=$(git config remote.${1-origin}.url | sed -e 's#^.*@#https://#' -e 's#.git$##' -e 's#:#/#2'); git web--browse $URL; }; f"
  # reset permission https://stackoverflow.com/a/4408378/2380457
	reset-permission = "!git diff -p -R --no-color | grep -E \"^(diff|(old|new) mode)\" --color=never | git apply"
  # create and checkout a new branch and keep all your changes.
  reset-permission-deep = "!f() { \
                if [ git rev-parse --git-dir > /dev/null 2>&1 ]; then\
                  git reset-permission;\
                else\
                   echo "$(pwd) is not a git repository";\
                   read -p \"Do you want to do a deep reset? (Y/n) \" choice;\
                   choice=${choice:-Y};\
                   if [[ \"$choice\" =~ ^([Yy])$ ]]; then \
                     find . -name '.git' -exec sh -c '([ -e \"$(git rev-parse --show-superproject-working-tree 2>/dev/null)\" ] || echo \">>> Updating `dirname '{}'`\" && cd `dirname '{}'` && git reset-permission)' ';';\
                   fi;\
                fi;\
              }; f"

# credits:
# http://haacked.com/archive/2014/07/28/github-flow-aliases/
# http://nuclearsquid.com/writings/git-tricks-tips-workflows/ 

[ghq]
	root = ~/src
