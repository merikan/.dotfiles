#!/usr/bin/env zsh
# This file is sourced by interactive shells. It should define aliases,
# functions, shell options, and key bindings.

# http://zsh.sourceforge.net/Intro/intro_toc.html#SEC16

# .zshenv is always sourced, it often contains exported variables that 
# should be available to other programs. For example, $PATH, $EDITOR, and $PAGER 
# are often set in .zshenv. Also, you can set $ZDOTDIR in .zshenv to specify an 
# alternative location for the rest of your zsh configuration.
# 
# .zshrc is for interactive shell configuration. You set options for the interactive 
# shell there with the setopt and unsetopt commands. You can also load shell modules, 
# set your history options, change your prompt, set up zle and completion, et cetera. 
# You also set any variables that are only used in the interactive shell (e.g. $LS_COLORS).
# 
# .zlogin is sourced on the start of a login shell. This file is often used to start X 
# using startx. Some systems start X on boot, so this file is not always very useful.
# 
# .zprofile is basically the same as .zlogin except that it's sourced directly before 
# .zshrc is sourced instead of directly after it. According to the zsh documentation, 
# ".zprofile is meant as an alternative to `.zlogin' for ksh fans; the two are not 
# intended to be used together, although this could certainly be done if desired."
# 
# .zlogout is sometimes used to clear and reset the terminal.

echo "Running .zshrc"

# load shared shell configuration
[ -f ~/.shrc ] && source ~/.shrc

# Use zsh framework  -------------------------------------------------------
local zsh_framework=${ZSH_FRAMEWORK:-""}
case $zsh_framework in
     "" )
        echo "No zsh framwork was set. Set variable ZSH_FRAMEWORK in file zshenv to activate"
        ;;
     "zim" )
        if [[ -s "${ZIM_HOME}/init.zsh" ]]; then
          # Update static initialization script if it's outdated, before sourcing it
          source ${ZIM_HOME}/zimfw.zsh init -q
          source ${ZIM_HOME}/init.zsh
        else
          echo "unable to load $zsh_framework"
        fi
        ;;
     "prezto" )
        if [[ -s "${HOME}/.local/zprezto/init.zsh" ]]; then
          source "${HOME}/.local/zprezto/init.zsh"
        else 
          echo "unable to load $zsh_framework"
        fi
        ;;
     "oh-my-zsh" )
        source "${ZDOTDIR:-$HOME}/.oh-my-zshrc"
        if [[ -s "$ZSH/oh-my-zsh.sh" ]]; then
          source "$ZSH/oh-my-zsh.sh"
        else 
          echo "unable to load $zsh_framework"
        fi
        ;;
     * )
        echo "zsh framework $zsh_framework not found"
        ;;
esac


# Personal settings below  -------------------------------------------------------

# add to fpath
fpath=( "$HOME/.zfunctions" $fpath )
# turn on autocomplete
autoload -Uz compinit
compinit
# include hidden files
_comp_options+=(globdots)
# autocompletion with an arrow-key driven interface
zstyle ':completion:*' menu select
#Change directories with variable names
setopt cdablevars
#globdots lets files beginning with a . be matched without explicitly specifying the dot.
setopt globdots
# extendedglob gives ability to do l -l **/*(^U)
setopt extendedglob
#turn off autocorrect
unsetopt correct
#allows ‘>’ redirection to truncate existing files.
setopt clobber
#Report the status of background jobs immediately, rather than waiting until just before printing a prompt
setopt notify
#no beep, 
unsetopt beep 
# History command configuration
setopt extended_history       # record timestamp of command in HISTFILE
setopt hist_expire_dups_first # delete duplicates first when HISTFILE size exceeds HISTSIZE
setopt hist_ignore_dups       # ignore duplicated commands history list
setopt hist_ignore_space      # ignore commands that start with space
setopt hist_verify            # show command with history expansion to user before running it
setopt inc_append_history     # add commands to HISTFILE in order of execution
setopt share_history          # share command history data
#If a pattern for filename generation has no matches, print an error,
#instead of leaving it unchanged in the argument list. This also 
#applies to file expansion of an initial ~ or =.
unsetopt nomatch
# Enable Ctrl-x-e to edit command line
autoload -U edit-command-line
# Emacs and Bash style
zle -N edit-command-line
bindkey '^xe' edit-command-line      # Ctrl+xe to open command line in editor
bindkey '^x^e' edit-command-line     # Ctrl+x, Ctrl+e to open command line in editor

#use emacs binding
#bindkey -e

#Use up key to search backward in the history for a line beginning with the current line up to the cursor.
bindkey '\e[A' history-beginning-search-backward
#Use down key to search forward in the history for a line beginning with the current line up to the cursor.
bindkey '\e[B' history-beginning-search-forward

# expand aliases with control+space
# idea from https://blog.patshead.com/2012/11/automatically-expaning-zsh-global-aliases---simplified.html
expandalias() {
    zle _expand_alias
    zle expand-word
}
zle -N expandalias
bindkey "^ " expandalias              # control+space to expand alias

# initialize prompt system
autoload -U promptinit && promptinit

# Use lf to switch directories and bind it to ctrl-o
command -v lf >/dev/null 2>&1  && {
  lfcd () {
      tmp="$(mktemp)"
      lf -last-dir-path="$tmp" "$@"
      if [ -f "$tmp" ]; then
          dir="$(cat "$tmp")"
          rm -f "$tmp"
          [ -d "$dir" ] && [ "$dir" != "$(pwd)" ] && cd "$dir"
      fi
  }
  bindkey -s '^o' 'lfcd\n'
}

# use spaceship-prompt
prompt spaceship
# source config file, remove this when PR #508 is added
[[ -s ${HOME}/.config/spaceship-prompt/config ]] && source ${HOME}/.config/spaceship-prompt/config

# ---------------------------------------------------------------------------------------------
# Liquid prompt -- A useful adaptive prompt for Bash & Zsh
# Only load Liquid Prompt in interactive shells, not from a script or from scp
# Only load if  zprompt_theme (zim) is not set and liquidprompt exists
if [[ $- = *i* ]] && [[ -z ${zprompt_theme} ]] && [[ -s ${ZDOTDIR:-${HOME}}/.local/liquidprompt/liquidprompt ]]; then
  #source ~/.local/liquidprompt/liquidprompt
fi

# Using Base16 for Shells https://github.com/chriskempson/base16-shell
BASE16_SHELL=$HOME/.config/base16-shell/
[ -n "$PS1" ] && [ -s $BASE16_SHELL/profile_helper.sh ] && eval "$($BASE16_SHELL/profile_helper.sh)"
! [[ -s ${HOME}/.base16_theme ]] && base16_oceanicnext  # set theme

#Fasd for quick access to files and directories for POSIX shells. (https://github.com/clvv/fasd)
command -v fasd >/dev/null 2>&1  && eval "$(fasd --init auto)"

command -v brew >/dev/null 2>&1  && {
  # Turn off automatic cleanup 
  export HOMEBREW_NO_INSTALL_CLEANUP=1
  # Use openssl from homebrew instead
  [ -d $(brew --prefix openssl)/bin ] && export PATH=$(brew --prefix openssl)/bin:$PATH
}

# source kubectl tab completion
command -v kubectl >/dev/null 2>&1 && source <(kubectl completion zsh)
# source openshift tab completion
command -v oc >/dev/null 2>&1 && source <(oc completion zsh)

# fzf for fuzzy file mathing. (https://github.com/junegunn/fzf)
[ -f ~/.fzf.zsh ] && {
  source ~/.fzf.zsh
  # Setting ag as the default source for fzf
  command -v ag >/dev/null 2>&1 && export FZF_DEFAULT_COMMAND='ag -g ""'
}

# Java: Use jenv to handle versions
#command -v jenv >/dev/null 2>&1 && {
#  export PATH="$HOME/.jenv/bin:$PATH"
#  eval "$(jenv init -)"
#  export JAVA_HOME=$HOME/.jenv/fake-java-home
#}

# Android
[ -d "/usr/local/opt/android-sdk" ] && {
  export ANDROID_HOME="/usr/local/opt/android-sdk"
  export PATH="${PATH}:$ANDROID_HOME/tools:$ANDROID_HOME/platform-tools"
}

# Golang
[ -f ~/.golangrc ] && source ~/.golangrc
# Installing go with homebrew instead of gvm
# use gvm - Go Version Manager
#[[ -s "$HOME/.gvm/scripts/gvm" ]]  && source "$HOME/.gvm/scripts/gvm"

# rvm
[[ -s "$HOME/.rvm/scripts/rvm" ]] && {
  source "$HOME/.rvm/scripts/rvm" # Load RVM into a shell session *as a function*
  export PATH=$PATH:$HOME/.rvm/bin # Add RVM to PATH for scripting
}

# sdkman
export SDKMAN_DIR="$HOME/.sdkman"
[[ -s "$SDKMAN_DIR/bin/sdkman-init.sh" ]] && {
  # disable GVM alias
  sed -i.bak 's/^\(sdkman_disable_gvm_alias=\).*/\1true/' "$SDKMAN_DIR/etc/config"
  # source sdkman  
  source "$SDKMAN_DIR/bin/sdkman-init.sh" 
}

# python
command -v python >/dev/null 2>&1 && {
  export PY_USER_SITE_DIR="$(python -m site --user-site)"

}
if [ -d "$HOME/Library/Python/2.7/bin" ]; then
    export PATH=$HOME/Library/Python/2.7/bin:$PATH
fi

# ruby on macos
[[ -s "/usr/local/opt/ruby/bin" ]] && {
  export PATH=/usr/local/opt/ruby/bin:$PATH
}

# load nvm
export NVM_DIR="$HOME/.nvm"
[ -s "/usr/local/opt/nvm/nvm.sh" ] && . "/usr/local/opt/nvm/nvm.sh"  # This loads nvm
[ -s "/usr/local/opt/nvm/etc/bash_completion.d/nvm" ] && . "/usr/local/opt/nvm/etc/bash_completion.d/nvm"  # This loads nvm bash_completion

# Functions  -------------------------------------------------------
[ -f ~/.functions ] && source ~/.functions
[ -f ~/.zsh_functions ] && source ~/.zsh_functions

# Aliases            -------------------------------------------------------
[ -f ~/.aliases ] && source ~/.aliases
[ -f ~/.zsh_aliases ] && source ~/.zsh_aliases

# Add personal bin directory to the path
export PATH=$HOME/bin:$HOME/.local/bin:$PATH

# use autoenv
[[ -f "$HOME/.local/zsh-autoenv/autoenv.zsh" ]] && source "$HOME/zsh-autoenv/autoenv.zsh"

##############################################################################
# Local Config
##############################################################################

# use .zshrc.local for settings specific to local system
[[ -f ~/.zshrc.local ]] && source ~/.zshrc.local

export PATH="$PATH:$HOME/.rvm/bin" # Add RVM to PATH for scripting
