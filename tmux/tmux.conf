#
# Notes to myself:
# * You can shorten commands as long as there is only one command that starts with 
#   the letters you write. So 'bind-key' can be shortened as 'bind' and 
#   'set-window-option' can be 'setw'.
# * see the man page if set or setw
# * -n tells tmux that the keybinding doesn’t require pressing the prefix.
# * -r is to enable repeat of command without need for pressing prefix again
# * Control sequences are not case sensitive but Meta sequences are. 
#   e.g. C-S-r or C-R doesn't work but this do M-R 

# ==========================
# ===  General settings  ===
# ==========================

# use a non-login shell
set -g default-command "${SHELL}"
# set scrollback history to 20000 (20k)
set -g history-limit 20000
set -g buffer-limit 20
# Set delay time between prefix and command to minimum (default:500ms)
set -s escape-time 0
# Change the time a message is displayed in the statusbar (default: 750ms)
set-option -g display-time 1500
# Don't close window when the program running in it exits
set -g remain-on-exit off
# repeat-time; time to send multiple commands without sending the prefix-key
set -g repeat-time 300
# Disable automatic renaming windows
setw -g automatic-rename off
# Disable changing the window title
set -g allow-rename off
# Make sute it will fit in window
setw -g aggressive-resize on

# Change prefix key to Ctrl+a, easier to type and 
unbind C-b
set -g prefix C-a
# Ensure that we can send Prefix to other apps; e.g. "start-of-line"
bind C-a send-prefix

# Set parent terminal title to reflect current window in tmux session 
set -g set-titles on
set -g set-titles-string "[#S]  #I:#W"

# Set the base index for windows to 1 instead of 0
set -g base-index 1
# Set the base index for panes to 1 instead of 0
setw -g pane-base-index 1
# Renumber windows when one is closed or moved
set -g renumber-windows on
# Enable mouse support
set -g mouse on

# ==========================
# ===   Key bindings     ===
# ==========================

# Prefer vi style key table
setw -g mode-keys vi

# Reload tmux configuration 
bind r source-file ~/.tmux.conf \; display "tmux.conf reloaded."

# new window, retain cwd and ask for a name
bind c command-prompt -p "Name of new window: " 'new-window -c "#{pane_current_path}" -n '%%' '

# Rename window and session
bind n command-prompt -I "#{window_name}" "rename-window '%%'"
bind N command-prompt -I "#{session_name}" "rename-session '%%'"

# Split panes ('split-window' is actually how panes are layed out)
bind s split-window -h -c '#{pane_current_path}' # Layout panes horizontally
bind h split-window -v -c '#{pane_current_path}' # Layout panes vertically

# Use Alt-vim keys without prefix key to switch panes
bind -n M-h select-pane -L
bind -n M-j select-pane -D 
bind -n M-k select-pane -U
bind -n M-l select-pane -R

# Use Alt-arrow keys without prefix key to switch panes
bind -n M-Left select-pane -L
bind -n M-Right select-pane -R
bind -n M-Up select-pane -U
bind -n M-Down select-pane -D

# Resize Pane with Alt-Shift-Arrow keys
bind -n M-S-Left resize-pane -L
bind -n M-S-Right resize-pane -R
bind -n M-S-Up resize-pane -U
bind -n M-S-Down resize-pane -D

# Shift arrow to switch windows
bind -n S-Left  previous-window
bind -n S-Right next-window

# Swap current window left and right
bind -n C-S-Left swap-window -t -1
bind -n C-S-Right swap-window -t +1

# Link window
bind L command-prompt -p "Link window from (session:window): " "link-window -s %% -a"

# Swap panes back and forth with 1st pane
# When in main-(horizontal|vertical) layouts, the biggest/widest panel is always @1
bind \ if '[ #{pane_index} -eq 1 ]' \
     'swap-pane -s "!"' \
     'select-pane -t:.1 ; swap-pane -d -t 1 -s "!"'

# Kill pane/window/session shortcuts
bind x confirm-before -p "kill pane? (y/n)" "kill-pane"
bind X confirm-before -p "kill window? (y/n)" "kill-window"
bind C-x confirm-before -p "kill all other windows? (y/n)" "kill-window -a"
bind Q confirm-before -p "kill-session #S? (y/n)" kill-session

# Merge session with another one (e.g. move all windows)
# If you use adhoc 1-window sessions, and you want to preserve session upon exit
# but don't want to create a lot of small unnamed 1-window sessions around
# move all windows from current session to main named one (dev, work, etc)
bind C-u command-prompt -p "Session to merge with: " \
   "run-shell 'yes | head -n #{session_windows} | xargs -I {} -n 1 tmux movew -t %%'"

# Detach from session
bind d detach
bind D if -F '#{session_many_attached}' \
    'confirm-before -p "Detach other clients? (y/n)" "detach -a"' \
    'display "Session has only 1 client attached"'

# Toggle status bar on/off
bind C-t set status
# Toggle pane-border-status on/off, values  [off | top | bottom]
#bind M-t if -F '#{s/off//:pane-border-status}' 'setw pane-border-status top' 'setw pane-border-status off'
#bind M-t 'display-message "value was off"'
#bind M-t if -F '#{s/off//:pane-border-status}' 'display-message "value was off"' 'display-message "value was off"'
#bind M-t if -F '#{s/off//:status}' 'set status off' 'set status on'
##bind M-t if -F setw pane-border-status 


# ==================================================
# === Window monitoring for activity and silence ===
# ==================================================
bind m setw monitor-activity \; display-message 'Monitor window activity [#{?monitor-activity,ON,OFF}]'
bind M if -F '#{monitor-silence}' \
    'setw monitor-silence 0 ; display-message "Monitor window silence [OFF]"' \
    'command-prompt -p "Monitor silence: interval (s)" "setw monitor-silence %%"'

# Activity bell and whistles
set -g visual-activity on

# TODO: Does not work as well, check on newer versions
# set -g visual-silence on

# BUG: bell-action other ignored · Issue #1027 · tmux/tmux · GitHub - https://github.com/tmux/tmux/issues/1027
# set -g visual-bell on
# setw -g bell-action other

# ================================================
# ===     Copy mode, scroll and clipboard      ===
# ================================================
set -g @copy_use_osc52_fallback on

unbind p
bind p paste-buffer
bind C-p choose-buffer

# trigger copy mode by prefix-Esc
unbind [
bind Escape copy-mode
# Setup 'v' to begin selection, just like Vim
bind -T copy-mode-vi v send-keys -X begin-selection

# Scroll up/down by 1 line, half screen, whole screen
bind -T copy-mode-vi M-Up              send-keys -X scroll-up
bind -T copy-mode-vi M-Down            send-keys -X scroll-down
bind -T copy-mode-vi M-PageUp          send-keys -X halfpage-up
bind -T copy-mode-vi M-PageDown        send-keys -X halfpage-down
bind -T copy-mode-vi PageUp            send-keys -X page-up
bind -T copy-mode-vi PageDown          send-keys -X page-down

# When scrolling with mouse wheel, reduce number of scrolled rows per tick to "2" (default is 5)
bind -T copy-mode-vi WheelUpPane       select-pane \; send-keys -X -N 2 scroll-up
bind -T copy-mode-vi WheelDownPane     select-pane \; send-keys -X -N 2 scroll-down

# wrap default shell in reattach-to-user-namespace if available
# there is some hack with `exec & reattach`, credits to "https://github.com/gpakosz/.tmux"
if -b "command -v reattach-to-user-namespace > /dev/null 2>&1" \
    "run 'tmux set -g default-command \"exec $(tmux show -gv default-shell) 2>/dev/null & reattach-to-user-namespace -l $(tmux show -gv default-shell)\"'"

yank="~/.tmux/yank.sh"

# Copy selected text
bind -T copy-mode-vi Enter send-keys -X copy-pipe-and-cancel "$yank"
bind -T copy-mode-vi y send-keys -X copy-pipe-and-cancel "$yank"
bind -T copy-mode-vi Y send-keys -X copy-line \;\
    run "tmux save-buffer - | $yank"
bind-key -T copy-mode-vi D send-keys -X copy-end-of-line \;\
    run "tmux save-buffer - | $yank"
bind -T copy-mode-vi C-j send-keys -X copy-pipe-and-cancel "$yank"
bind-key -T copy-mode-vi A send-keys -X append-selection-and-cancel \;\
    run "tmux save-buffer - | $yank"

# Copy selection on drag end event, but do not cancel copy mode and do not clear selection
# clear select on subsequence mouse click
bind -T copy-mode-vi MouseDragEnd1Pane \
    send-keys -X copy-pipe "$yank"
bind -T copy-mode-vi MouseDown1Pane select-pane \;\
   send-keys -X clear-selection
    
# iTerm2 works with clipboard out of the box, set-clipboard already set to "external"
# tmux show-options -g -s set-clipboard
# set-clipboard on|external

# =====================================
# ===           Theme               ===
# =====================================
# load the theme
source-file ~/.tmux/themes/base16-theme.conf
# set powerline status line
if-shell 'test -f ${PY_USER_SITE_DIR}/powerline/bindings/tmux/powerline.conf' \
    'run-shell "powerline-daemon -q"; \
     source-file "${PY_USER_SITE_DIR}/powerline/bindings/tmux/powerline.conf"; '

# =====================================
# ===        Renew environment      ===
# =====================================
set -g update-environment \
  "DISPLAY\
  SSH_ASKPASS\
  SSH_AUTH_SOCK\
  SSH_AGENT_PID\
  SSH_CONNECTION\
  SSH_TTY\
  WINDOWID\
  XAUTHORITY"

bind '$' run "~/.tmux/renew_env.sh"


# ============================
# ===       Plugins        ===
# ============================

# List of plugins
set -g @plugin 'tmux-plugins/tpm'                   # Tmux Plugin Manager
set -g @plugin 'tmux-plugins/tmux-prefix-highlight' # highlights when you press tmux prefix key.
set -g @plugin 'tmux-plugins/tmux-online-status'    # displays online status
set -g @plugin 'tmux-plugins/tmux-copycat'          # enhances tmux search
set -g @plugin 'tmux-plugins/tmux-open'             # for quick opening of a highlighted file or url
set -g @plugin 'tmux-plugins/tmux-resurrect'        # persists tmux environment across system restarts
set -g @plugin 'tmux-plugins/tmux-continuum'        # continuous saving of tmux environment.
#set -g @plugin 'thewtex/tmux-mem-cpu-load'          # prints CPU usage, memory & swap etc.
set -g @plugin 'tmux-plugins/tmux-sidebar'

# Plugin settings (also, see theme config)
set -g @resurrect-save 'C-s'
set -g @resurrect-restore 'C-r'
#set -g @continuum-restore 'on' # automatically restore when tmux is started.

# install tpm and plugins automatically when tmux is started
if "test ! -d ~/.tmux/plugins/tpm" \
   "run 'git clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm && ~/.tmux/plugins/tpm/bin/install_plugins'"

# ==============================================
# ===   Nesting local and remote sessions     ===
# ==============================================

# Session is considered to be remote when we ssh into host
if-shell 'test -n "$SSH_CLIENT"' \
    'source-file ~/.tmux/tmux.remote.conf'

# We want to have single prefix key "C-a", usable both for local and remote session
# we don't want to "C-a" + "a" approach either
# Idea is to turn off all key bindings and prefix handling on local session,
# so that all keystrokes are passed to inner/remote session

# see: toggle on/off all keybindings · Issue #237 · tmux/tmux - https://github.com/tmux/tmux/issues/237

# Also, change some visual styles when window keys are off
# TODO fix this
bind -T root F12  \
    set prefix None \;\
    set key-table off \;\
    set status-style "fg=$color_status_text,bg=$color_window_off_status_bg" \;\
    set window-status-current-format "#[fg=$color_window_off_status_bg,bg=$color_window_off_status_current_bg]$separator_powerline_right#[default] #I:#W# #[fg=$color_window_off_status_current_bg,bg=$color_window_off_status_bg]$separator_powerline_right#[default]" \;\
    set window-status-current-style "fg=$color_dark,bold,bg=$color_window_off_status_current_bg" \;\
    if -F '#{pane_in_mode}' 'send-keys -X cancel' \;\
    refresh-client -S \;\

bind -T off F12 \
  set -u prefix \;\
  set -u key-table \;\
  set -u status-style \;\
  set -u window-status-current-style \;\
  set -u window-status-current-format \;\
  refresh-client -S

# Initialize TMUX plugin manager (keep this line at the very bottom of tmux.conf)
run '~/.tmux/plugins/tpm/tpm'