# install.conf.yaml for dotbot https://github.com/anishathalye/dotbot
- defaults:
    link:
        relink: true
        create: true
    shell:
        stderr: true

- clean: ['~']

- shell:
    - [git submodule update --init --recursive, Installing/Updating submodules]
    - ["mkdir -p $HOME/{.config,src,go,tmp,Projects}", Creating default directories]

- link:
    # add bins
    ~/bin/$: bin/$
    # alacritty
    ~/.config/alacritty/alacritty.yml: alacritty/alacritty.yml
    # atom
    ~/.atomrc: atom/atomrc
    # base16-shell
    ~/.config/base16-shell: submodules/base16-shell
    # bash
    ~/.bash_aliases: bash/bash_aliases
    ~/.bash_functions: bash/bash_functions
    ~/.bash_profile: bash/bash_profile
    ~/.bashrc: bash/bashrc
    # fzf
    ~/.fzf.bash: fzf/fzf.bash
    ~/.fzf.zsh: fzf/fzf.zsh
    # git
    ~/.gitignore_global: git/gitignore_global
    ~/.git_commit_msg: git/git_commit_msg
    ~/.gitconfig.local.template: git/gitconfig.local.template
    ~/.gitconfig: git/gitconfig
    # golang
    ~/.golangrc: golang/golangrc
    # hammerspoon
    ~/.hammerspoon/init.lua: hammerspoon/init.lua
    ~/.hammerspoon/Spoons/SpoonInstall.spoon: hammerspoon/Spoons/SpoonInstall.spoon
    # homebrew
    ~/.Brewfile: homebrew/Brewfile
    ~/.config/homebrew/config: homebrew/config
    ~/bin/brewit: homebrew/brewit
    # k9s
    ~/.k9s/skin.yml: k9s/skins/dracula.yml
    #lf
    ~/.config/lf/lfrc: lf/lfrc
    # liquidprompt
    ~/.local/liquidprompt: submodules/liquidprompt
    ~/.liquidpromptrc: liquidprompt/liquidpromptrc
    # mackup
    ~/.mackup.cfg: mackup/mackup.cfg
    # macos
    ~/bin/macos-settings: macos/macos-settings
    # nvim
    ~/.config/nvim/init.vim: nvim/init.vim
    ~/.config/nvim/settings.vim: nvim/settings.vim
    ~/.config/nvim/key-mappings.vim: nvim/key-mappings.vim
    ~/.config/nvim/plugins: nvim/plugins
    ~/.config/nvim/themes: nvim/themes
    # oh-my-zsh
    ~/.oh-my-zshrc: oh-my-zsh/oh-my-zshrc
    ~/.local/oh-my-zsh: submodules/oh-my-zsh
    # powerline
    ~/.config/powerline: powerline
    # python
    ~/.config/python/requirement.txt: python/requirement.txt
    ~/bin/pyit: python/pyit
    # prezto
    ~/.zpreztorc: prezto/zpreztorc
    ~/.local/zprezto: submodules/prezto
    # sdkman
    ~/bin/sdkit: sdkman/sdkit
    # shell
    ~/.aliases: sh/aliases
    ~/.functions: sh/functions
    ~/.inputrc: sh/inputrc
    ~/.profile: sh/profile
    ~/.shrc: sh/shrc
    # spaceship-prompt
    #~/.zfunctions/prompt_spaceship_setup: submodules/spaceship-prompt/spaceship.zsh
    ~/.config/spaceship-prompt/config: spaceship-prompt/spaceship-promptrc
    # tmux
    ~/.tmux.conf: tmux/tmux.conf
    ~/.tmux/themes: tmux/themes
    # zim
    ~/.local/zim/zimfw.zsh: zim/zimfw.zsh
    ~/.zimrc: zim/zimrc
    # zsh
    ~/.zlogin: zsh/zlogin
    ~/.zlogout: zsh/zlogout
    ~/.zprofile: zsh/zprofile
    ~/.zsh_aliases: zsh/zsh_aliases
    ~/.zshenv: zsh/zshenv
    ~/.zshrc: zsh/zshrc
    # zsh-autoenv
    ~/.local/zsh-autoenv: submodules/zsh-autoenv

# nvim
- shell:
    -
        description: create vim unddo directory
        command: "mkdir -p ~/.local/share/nvim/undodir"
        stdin: true
        stdout: true
        stderr: true
    -
        description: Installing vim-plug if needed
        command: "[ ! -s ~/.config/nvim/autoload/plug.vim ] && curl -fLo ~/.config/nvim/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim || exit 0"
        stdin: true
        stdout: true
        stderr: true

#zim
- shell:
    -
        description: Installing zim modules if needed
        command: "[ -s ${ZIM_HOME}/zimfw.zsh ] && [ ! -d ${ZIM_HOME}/modules ] && source ${ZIM_HOME}/zimfw.zsh install || exit 0"
        stdin: true
        stdout: true
        stderr: true
- shell:
    -
        description: Installing/Updating Sdkman and candidates
        command: $HOME/bin/sdkit
        stdin: true
        stdout: true
        stderr: true
- shell:
    -
        description: Installing/Updating Homebrew and formulea
        command: $HOME/bin/brewit
        stdin: true
        stdout: true
        stderr: true
- shell:
    -
        description: Installing Python packages
        command: $HOME/bin/pyit
        stdin: true
        stdout: true
        stderr: true
